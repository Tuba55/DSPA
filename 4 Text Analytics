# -*- coding: utf-8 -*-
"""DSPA4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18ht-0_dWPCMwijgQmqluByEpHixHzhtZ
"""

# Practical No : 04
# Aim: Text Analytics
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
import pandas as pd

# Download VADER lexicon
nltk.download('vader_lexicon')

def analyze_sentiment(text):
    # Initialize SentimentIntensityAnalyzer
    sia = SentimentIntensityAnalyzer()
    sentiment_scores = sia.polarity_scores(text)

    # Classify sentiment based on compound score
    if sentiment_scores['compound'] >= 0.05:
        sentiment = "Positive"
    elif sentiment_scores['compound'] <= -0.05:
        sentiment = "Negative"
    else:
        sentiment = "Neutral"

    return sentiment, sentiment_scores

def analyze_sentiments(texts):
    results = []
    # Analyze sentiment for each text in the list
    for text in texts:
        sentiment, scores = analyze_sentiment(text)
        results.append({
            'text': text,
            'sentiment': sentiment,
            'pos_score': scores['pos'],
            'neg_score': scores['neg'],
            'neu_score': scores['neu'],
            'compound_score': scores['compound']
        })
    return pd.DataFrame(results)

# Example usage with a list of texts
texts = [
    "I’m so impressed with this service, truly a game changer!",
    "I wouldn’t recommend this at all. Very disappointing.",
    "The food was decent, but not amazing.",
    "I’m indifferent. It didn’t really stand out to me either way.",
    "Absolutely fantastic experience, I couldn’t have asked for more!"
]

# Analyze sentiments of the sample texts
results_df = analyze_sentiments(texts)
print(results_df)
